<system>
You are a security testing engineer who wants to write a C program to discover memory corruption vulnerabilities in a given function-under-test by executing all lines in it.
You need to define and initializing its parameters in a suitable way before fuzzing the function-under-test through <code>LLVMFuzzerTestOneInput</code>, in particular, none of the parameters can be NULL.

Carefully study the function signature and its parameters, then follow the example problems and solutions to answer the final problem. YOU MUST call the function to fuzz in the solution.

Try as many variations of these inputs as possible. Do not use a random number generator such as <code>rand()</code>.
</system>



<instruction>
All variables used MUST be declared and initialized. Carefully make sure that the variable and argument types in your code match and compiles successfully. Add type casts to make types match.
All variable values MUST NOT be NULL whenever possible.

Do not create new variables with the same names as existing variables.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  void* data = Foo();
}
</code>
</instruction>

<instruction>
EXTREMELY IMPORTANT: If you write code using <code>goto</code>, you MUST MUST also declare all variables BEFORE the <code>goto</code>. Never introduce new variables after the <code>goto</code>.
WRONG:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  if (!some_function()) goto EXIT;
  Foo b = target_function(data, size);
  int c = another_func();
EXIT:
  return 0;
}
</code>

CORRECT:
<code>
int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
  int a = bar();
  Foo b;
  int c;

  if (!some_function()) goto EXIT;
  b = target_function(data, size);
  c = another_func()
EXIT:
  return 0;
}
</code>

If an example provided for the same library includes a unique header file, then it must be included in the solution as well.
</instruction>

<task>
Your goal is to write a fuzzing harness for the provided function-under-test signature using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function-under-test specified by the function signature:
<function signature>
isc_result_t dns_message_parse(dns_message_t *msg, isc_buffer_t *source, unsigned int options)
</function signature>
</task>

<solution>

#include <inttypes.h>
#include <stdbool.h>
#include <stdlib.h>

#include <isc/buffer.h>
#include <isc/commandline.h>
#include <isc/file.h>
#include <isc/mem.h>
#include <isc/result.h>
#include <isc/string.h>
#include <isc/util.h>

#include <dns/message.h>

#include "fuzz.h"

bool debug = false;

static isc_mem_t *mctx = NULL;
static uint8_t *output = NULL;
static size_t output_len = 1024;
static uint8_t render_buf[64 * 1024 - 1];

int
LLVMFuzzerInitialize(int *argc ISC_ATTR_UNUSED, char ***argv ISC_ATTR_UNUSED) {
	isc_mem_create(&mctx);
	output = isc_mem_get(mctx, output_len);

	return (0);
}

static isc_result_t
parse_message(isc_buffer_t *input, dns_message_t **messagep) {
	isc_result_t result;
	dns_message_t *message = NULL;

	dns_message_create(mctx, NULL, NULL, DNS_MESSAGE_INTENTPARSE, &message);

	result = dns_message_parse(message, input, DNS_MESSAGEPARSE_BESTEFFORT);
	if (result == DNS_R_RECOVERABLE) {
		result = ISC_R_SUCCESS;
	}

	if (result == ISC_R_SUCCESS && messagep != NULL) {
		*messagep = message;
	} else {
		dns_message_detach(&message);
	}

	return (result);
}

static isc_result_t
print_message(dns_message_t *message) {
	isc_result_t result;
	isc_buffer_t buffer;

	do {
		isc_buffer_init(&buffer, output, output_len);
		result = dns_message_totext(message, &dns_master_style_debug, 0,
					    &buffer);
		if (result == ISC_R_NOSPACE) {
			isc_mem_put(mctx, output, output_len);
			output_len *= 2;
			output = isc_mem_get(mctx, output_len);
			continue;
		}
	} while (result == ISC_R_NOSPACE);

	if (debug) {
		fprintf(stderr, "%.*s\n", (int)isc_buffer_usedlength(&buffer),
			output);
	}

	return (result);
}

#define CHECKRESULT(r, f)                 \
	{                                 \
		r = (f);                  \
		if (r != ISC_R_SUCCESS) { \
			goto cleanup;     \
		}                         \
	}

static isc_result_t
render_message(dns_message_t **messagep) {
	isc_result_t result;
	dns_message_t *message = *messagep;
	isc_buffer_t buffer;
	dns_compress_t cctx;

	isc_buffer_init(&buffer, render_buf, sizeof(render_buf));

	message->from_to_wire = DNS_MESSAGE_INTENTRENDER;
	for (size_t i = 0; i < DNS_SECTION_MAX; i++) {
		message->counts[i] = 0;
	}

	dns_compress_init(&cctx, mctx, 0);

	CHECKRESULT(result, dns_message_renderbegin(message, &cctx, &buffer));

	CHECKRESULT(result, dns_message_rendersection(message,
						      DNS_SECTION_QUESTION, 0));

	CHECKRESULT(result,
		    dns_message_rendersection(message, DNS_SECTION_ANSWER, 0));
	CHECKRESULT(result, dns_message_rendersection(
				    message, DNS_SECTION_AUTHORITY, 0));

	CHECKRESULT(result, dns_message_rendersection(
				    message, DNS_SECTION_ADDITIONAL, 0));

	dns_message_renderend(message);

	dns_compress_invalidate(&cctx);

	message->from_to_wire = DNS_MESSAGE_INTENTPARSE;

	dns_message_detach(messagep);

	result = parse_message(&buffer, messagep);

	return (result);

cleanup:
	dns_compress_invalidate(&cctx);
	return (result);
}

int
LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
	isc_buffer_t buffer;
	isc_result_t result;
	dns_message_t *message = NULL;

	if (size > 65535) {
		return (0);
	}

	isc_buffer_constinit(&buffer, data, size);
	isc_buffer_add(&buffer, size);
	isc_buffer_setactive(&buffer, size);

	result = parse_message(&buffer, &message);
	if (result != ISC_R_SUCCESS) {
		goto cleanup;
	}

	result = print_message(message);
	if (result != ISC_R_SUCCESS) {
		goto cleanup;
	}

	result = render_message(&message);
	if (result != ISC_R_SUCCESS) {
		goto cleanup;
	}

	result = print_message(message);
	if (result != ISC_R_SUCCESS) {
		goto cleanup;
	}

cleanup:
	if (message != NULL) {
		dns_message_detach(&message);
	}

	return (0);
}
</solution>


<task>
Your goal is to write a fuzzing harness for the provided function-under-test signature using <code>LLVMFuzzerTestOneInput</code>. It is important that the provided solution compiles and actually calls the function-under-test specified by the function signature:
<function signature>
{FUNCTION_SIGNATURE}
</function signature>
</task>
You MUST call <code>
{FUNCTION_SIGNATURE}
</code> in your solution!

<solution>